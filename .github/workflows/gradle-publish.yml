name: Build Android App

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Set up Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v3
        with:
          cmdline-tools-version: '9477386'

      # Cache Gradle dependencies
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Debug: List directory structure
      - name: List directory structure
        run: ls -R

      # Verify and set execute permissions for gradlew
      - name: Verify and chmod gradlew
        run: |
          if [ ! -f ./gradlew ]; then
            echo "Error: gradlew not found"
            exit 1
          fi
          chmod +x ./gradlew
          ls -l ./gradlew

      # Build the release APK with detailed logging
      - name: Build release APK
        run: ./gradlew assembleRelease --stacktrace --debug --warning-mode all
        continue-on-error: true

      # Display problems report (if exists)
      - name: Display problems report
        run: |
          if [ -f build/reports/problems/problems-report.html ]; then
            echo "Problems report found, displaying content:"
            cat build/reports/problems/problems-report.html
          else
            echo "No problems-report.html found"
          fi

      # Upload problems report as artifact (if exists)
      - name: Upload problems report
        uses: actions/upload-artifact@v4
        with:
          name: problems-report
          path: build/reports/problems/problems-report.html
          if-no-files-found: warn

      # Decode and set up keystore for signing (if secrets are provided)
      - name: Decode Keystore
        if: ${{ env.SIGNING_KEYSTORE_BASE64 != '' }}
        env:
          SIGNING_KEYSTORE_BASE64: ${{ secrets.SIGNING_KEYSTORE_BASE64 }}
        run: |
          echo $SIGNING_KEYSTORE_BASE64 | base64 -d > my-release-key.jks
          echo "storeFile=my-release-key.jks" >> ./app/signing.properties
          echo "storePassword=${{ secrets.SIGNING_KEYSTORE_PASSWORD }}" >> ./app/signing.properties
          echo "keyAlias=${{ secrets.SIGNING_KEY_ALIAS }}" >> ./app/signing.properties
          echo "keyPassword=${{ secrets.SIGNING_KEY_PASSWORD }}" >> ./app/signing.properties

      # Sign the APK (if keystore is set up and APK exists)
      - name: Sign APK
        if: ${{ env.SIGNING_KEYSTORE_BASE64 != '' }}
        run: |
          if [ -f app/build/outputs/apk/release/app-release-unsigned.apk ]; then
            jarsigner -keystore my-release-key.jks -storepass ${{ secrets.SIGNING_KEYSTORE_PASSWORD }} \
              -keypass ${{ secrets.SIGNING_KEY_PASSWORD }} \
              app/build/outputs/apk/release/app-release-unsigned.apk ${{ secrets.SIGNING_KEY_ALIAS }}
            zipalign -v 4 app/build/outputs/apk/release/app-release-unsigned.apk app/build/outputs/apk/release/app-release.apk
          else
            echo "No unsigned APK found, skipping signing"
          fi

      # Upload the APK artifact (if exists)
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: app/build/outputs/apk/release/app-release.apk
          if-no-files-found: warn
